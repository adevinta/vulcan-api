package service

import (
	"context"
	"fmt"

	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/log/level"
	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/adevinta/vulcan-api/pkg/api"
)

type Middleware func(service api.VulcanitoService) api.VulcanitoService

func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next api.VulcanitoService) api.VulcanitoService {
		return loggingMiddleware{logger, next}
	}
}

type loggingMiddleware struct {
	logger log.Logger
	next   api.VulcanitoService
}

// mySprintf returns a formatted string where if an argument is a byte array is printed as a string,
// and all the other types are in the default format
func mySprintf(a interface{}) string {
	t, ok := a.([]byte)
	if ok {
		return fmt.Sprintf("%s", t)
	}
	return fmt.Sprintf("%+v", a)
}

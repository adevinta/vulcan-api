{
	"info": {
		"_postman_id": "e181bd07-6e5f-477e-99e1-d92334ad2f1f",
		"name": "vulcan",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6686087"
	},
	"item": [
		{
			"name": "Asset Annotations",
			"item": [
				{
					"name": "Init",
					"item": [
						{
							"name": "Team 1 - Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Set variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"an_team1_id\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"asset-annotation-team-1\",\n\t\"description\": \"team used to test asset annotations\",\n    \"tag\": \"asset-annotation-team-1\"\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/teams",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team2 - Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Set variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"an_team2_id\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"asset-annotation-team-2\",\n\t\"description\": \"team used to test asset annotations\",\n    \"tag\": \"asset-annotation-team-2\"\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/teams",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "User1 - Create (non-admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Set variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"an_user1_id\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstname\": \"an-user1\",\n\t\"lastname\": \"\",\n\t\"email\": \"an-user1@vulcan.example.com\"\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "User2 - Create (non-admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Set variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"an_user2_id\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstname\": \"an-user2\",\n\t\"lastname\": \"\",\n\t\"email\": \"an-user2@vulcan.example.com\"\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "User1 - Create token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"user token response is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.token).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Set variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"an_user1_token\", jsonData.token);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/v1/users/{{an_user1_id}}/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{an_user1_id}}",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "User2 - Create token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"user token response is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.token).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Set variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"an_user2_token\", jsonData.token);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/v1/users/{{an_user2_id}}/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{an_user2_id}}",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team1 - Make User1 owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"User is added to team with correct response data\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.user.id).to.eql(pm.environment.get(\"an_user1_id\"));",
											"     pm.expect(jsonData.role).to.eql(\"owner\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user_id\": \"{{an_user1_id}}\",\n\t\"role\": \"owner\"\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/members",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams",
										"{{an_team1_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team2 - Make User2 owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"User is added to team with correct response data\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.user.id).to.eql(pm.environment.get(\"an_user2_id\"));",
											"     pm.expect(jsonData.role).to.eql(\"owner\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user_id\": \"{{an_user2_id}}\",\n\t\"role\": \"owner\"\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/teams/{{an_team2_id}}/members",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams",
										"{{an_team2_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team1 - Create IP Assets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Asset data is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].scannable).to.eql(true);",
											"    pm.expect(jsonData[1].scannable).to.eql(true);",
											"    pm.environment.set(\"an_team1_asset1_id\", jsonData[0].id);",
											"    pm.environment.set(\"an_team1_asset2_id\", jsonData[1].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"assets\": [\n\t\t{\n\t\t\t\"type\": \"IP\",\n\t\t\t\"identifier\": \"1.1.1.1\",\n\t\t\t\"scannable\": true\n\t\t},\n\t\t{\n\t\t\t\"type\": \"IP\",\n\t\t\t\"identifier\": \"1.1.1.2\",\n\t\t\t\"scannable\": true\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams",
										"{{an_team1_id}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team2 - Create IP Assets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Asset data is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].scannable).to.eql(true);",
											"    pm.expect(jsonData[1].scannable).to.eql(true);",
											"    pm.environment.set(\"an_team2_asset1_id\", jsonData[0].id);",
											"    pm.environment.set(\"an_team2_asset2_id\", jsonData[1].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"assets\": [\n\t\t{\n\t\t\t\"type\": \"IP\",\n\t\t\t\"identifier\": \"2.2.2.2\",\n\t\t\t\"scannable\": true\n\t\t},\n\t\t{\n\t\t\t\"type\": \"IP\",\n\t\t\t\"identifier\": \"2.2.2.3\",\n\t\t\t\"scannable\": true\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/teams/{{an_team2_id}}/assets",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams",
										"{{an_team2_id}}",
										"assets"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CRUD Operations",
					"item": [
						{
							"name": "List & Create",
							"item": [
								{
									"name": "Team1 - Asset1 - List Annotations - Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotation data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"]).to.eql({})",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Add Annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/1\"]).to.eql(\"new1\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/2\"]).to.eql(\"new2\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": {\n        \"test/1\": \"new1\",\n        \"test/2\": \"new2\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - List Annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/1\"]).to.eql(\"new1\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/2\"]).to.eql(\"new2\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Add Annotations again (fail)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.type).to.eql(\"Cannot create record\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": {\n        \"test/1\": \"failednew1\",\n        \"test/2\": \"failednew2\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Add non-unique Annotations (fail)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.type).to.eql(\"Cannot create record\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": {\n        \"test/3\": \"new3\",\n        \"test/1\": \"overlapping1\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - List Annotations - No changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/1\"]).to.eql(\"new1\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/2\"]).to.eql(\"new2\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Team1 - Asset1 - Update Annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/1\"]).to.eql(\"patched1\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/2\"]).to.eql(\"patched2\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": {\n        \"test/1\": \"patched1\",\n        \"test/2\": \"patched2\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - List Annotations after Patch Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/1\"]).to.eql(\"patched1\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/2\"]).to.eql(\"patched2\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Update non-existing annotation (fail)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Return error msg is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.type).to.eql(\"Record not found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": {\n        \"test/1\": \"patched_failed_1\",\n        \"test/3\": \"patched_failed_3\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - List Annotations - Failed patch did not update model",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/1\"]).to.eql(\"patched1\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/2\"]).to.eql(\"patched2\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Team1 - Asset1 - Delete one annotation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": [ \n        \"test/1\"\n    ]\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - List Annotations after delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/2\"]).to.eql(\"patched2\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Re-add multiple annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/3\"]).to.eql(\"new3\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/4\"]).to.eql(\"new4\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/5\"]).to.eql(\"new5\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(3);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": {\n        \"test/3\": \"new3\",\n        \"test/4\": \"new4\",\n        \"test/5\": \"new5\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Delete multiple annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": [ \n        \"test/2\",\n        \"test/3\",\n        \"test/4\"\n    ]\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - List Annotations after multiple delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/5\"]).to.eql(\"new5\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Delete last remaining",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": [ \n        \"test/5\"\n    ]\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - List Annotations - Empty after delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotation data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"]).to.eql({})",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Put",
							"item": [
								{
									"name": "Team1 - Asset1 - Re-add multiple annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/1\"]).to.eql(\"new1\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/2\"]).to.eql(\"new2\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/3\"]).to.eql(\"new3\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(3);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": {\n        \"test/1\": \"new1\",\n        \"test/2\": \"new2\",\n        \"test/3\": \"new3\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Put",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/1\"]).to.eql(\"put1\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/3\"]).to.eql(\"put3\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/4\"]).to.eql(\"put4\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(3);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": {\n        \"test/1\": \"put1\",\n        \"test/3\": \"put3\",\n        \"test/4\": \"put4\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - List Annotations after Put",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/1\"]).to.eql(\"put1\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/3\"]).to.eql(\"put3\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/4\"]).to.eql(\"put4\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(3);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Put - Clean all - empty body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - List Annotations after Put - empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Re-add multiple annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/1\"]).to.eql(\"new1\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/2\"]).to.eql(\"new2\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/3\"]).to.eql(\"new3\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(3);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": {\n        \"test/1\": \"new1\",\n        \"test/2\": \"new2\",\n        \"test/3\": \"new3\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Put - Clean all - empty parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": {}\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - List Annotations after Put - empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{an_user1_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Authorization",
					"item": [
						{
							"name": "Cross-team operation - READ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.type).to.eql(\"Record not found\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/v1/teams/{{an_team2_id}}/assets/{{an_team1_asset1_id}}/annotations",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams",
										"{{an_team2_id}}",
										"assets",
										"{{an_team1_asset1_id}}",
										"annotations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cross-team operation - CREATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Forbidden\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.type).to.eql(\"Forbidden\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"annotations\": {\n        \"invalid\": \"invalid\"\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/teams/{{an_team2_id}}/assets/{{an_team1_asset1_id}}/annotations",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams",
										"{{an_team2_id}}",
										"assets",
										"{{an_team1_asset1_id}}",
										"annotations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cross-team operation - UPDATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Forbidden\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.type).to.eql(\"Forbidden\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"annotations\": {\n        \"invalid\": \"invalid\"\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/teams/{{an_team2_id}}/assets/{{an_team1_asset1_id}}/annotations",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams",
										"{{an_team2_id}}",
										"assets",
										"{{an_team1_asset1_id}}",
										"annotations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cross-team operation - DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Forbidden\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.type).to.eql(\"Forbidden\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"annotations\": [\n        \"invalid\"\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/teams/{{an_team2_id}}/assets/{{an_team1_asset1_id}}/annotations",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams",
										"{{an_team2_id}}",
										"assets",
										"{{an_team1_asset1_id}}",
										"annotations"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{an_user2_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Asset endpoint Integration",
					"item": [
						{
							"name": "Asset model response",
							"item": [
								{
									"name": "Team1 - Asset1 - Add Annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData).to.have.property(\"annotations\")",
													"    pm.expect(jsonData[\"annotations\"][\"test/1\"]).to.eql(\"new1\");",
													"    pm.expect(jsonData[\"annotations\"][\"test/2\"]).to.eql(\"new2\");",
													"    pm.expect(Object.keys(jsonData[\"annotations\"]).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"annotations\": {\n        \"test/1\": \"new1\",\n        \"test/2\": \"new2\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}/annotations",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}",
												"annotations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Asset model response",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"an_team1_asset1_id\"));",
													"    pm.expect(jsonData.annotations[\"test/1\"]).to.eql(\"new1\");",
													"    pm.expect(jsonData.annotations[\"test/2\"]).to.eql(\"new2\");",
													"    pm.expect(Object.keys(jsonData.annotations).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset1_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset1 - Asset model response (ListAssets)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    for (const asset of jsonData) {",
													"        if (asset.id == pm.environment.get(\"an_team1_asset1_id\")) {",
													"            pm.expect(asset.annotations[\"test/1\"]).to.eql(\"new1\");",
													"            pm.expect(asset.annotations[\"test/2\"]).to.eql(\"new2\");",
													"            pm.expect(Object.keys(asset.annotations).length).to.eql(2);",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset2 - Asset model response - Null value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"an_team1_asset2_id\"));",
													"    pm.expect(jsonData.annotations).to.eql(null)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset2_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset2_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset2 - Asset model response (ListAssets) - Null value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    for (const asset of jsonData) {",
													"        if (asset.id == pm.environment.get(\"an_team1_asset2_id\")) {",
													"            pm.expect(asset.annotations).to.eql(null)",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Asset creation endpoints",
							"item": [
								{
									"name": "Team1 - Create assets with embedded annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Asset data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"an_team1_asset3_id\", jsonData[0].id);",
													"    pm.environment.set(\"an_team1_asset4_id\", jsonData[1].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"assets\": [\n\t\t{\n\t\t\t\"type\": \"Hostname\",\n\t\t\t\"identifier\": \"example.com\",\n\t\t\t\"scannable\": true\n\t\t},\n\t\t{\n\t\t\t\"type\": \"DomainName\",\n\t\t\t\"identifier\": \"example.com\",\n\t\t\t\"scannable\": true\n\t\t}\n\t],\n    \"annotations\": {\n        \"embed/1\": \"value1\",\n        \"embed/2\": \"value2\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset3 - Check embed annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"an_team1_asset3_id\"));",
													"    pm.expect(jsonData.annotations[\"embed/1\"]).to.eql(\"value1\");",
													"    pm.expect(jsonData.annotations[\"embed/2\"]).to.eql(\"value2\");",
													"    pm.expect(Object.keys(jsonData.annotations).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset3_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset3_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset4 - Check embedded annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"an_team1_asset4_id\"));",
													"    pm.expect(jsonData.annotations[\"embed/1\"]).to.eql(\"value1\");",
													"    pm.expect(jsonData.annotations[\"embed/2\"]).to.eql(\"value2\");",
													"    pm.expect(Object.keys(jsonData.annotations).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset4_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset4_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Create assets with embedded annotations (Multistatus)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Asset data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].status.code).to.eql(201)",
													"    pm.expect(jsonData[1].status.code).to.eql(201)",
													"    pm.environment.set(\"an_team1_asset5_id\", jsonData[0].id);",
													"    pm.environment.set(\"an_team1_asset6_id\", jsonData[1].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"assets\": [\n\t\t{\n\t\t\t\"type\": \"Hostname\",\n\t\t\t\"identifier\": \"google.com\",\n\t\t\t\"scannable\": true\n\t\t},\n\t\t{\n\t\t\t\"type\": \"DomainName\",\n\t\t\t\"identifier\": \"google.com\",\n\t\t\t\"scannable\": true\n\t\t}\n\t],\n    \"annotations\": {\n        \"embed/1\": \"ms1\",\n        \"embed/2\": \"ms2\"\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/multistatus",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"multistatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset5 - Check embed annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"an_team1_asset5_id\"));",
													"    pm.expect(jsonData.annotations[\"embed/1\"]).to.eql(\"ms1\");",
													"    pm.expect(jsonData.annotations[\"embed/2\"]).to.eql(\"ms2\");",
													"    pm.expect(Object.keys(jsonData.annotations).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset5_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset5_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Team1 - Asset6 - Check embed annotations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Asset annotations data is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"an_team1_asset6_id\"));",
													"    pm.expect(jsonData.annotations[\"embed/1\"]).to.eql(\"ms1\");",
													"    pm.expect(jsonData.annotations[\"embed/2\"]).to.eql(\"ms2\");",
													"    pm.expect(Object.keys(jsonData.annotations).length).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/v1/teams/{{an_team1_id}}/assets/{{an_team1_asset6_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"teams",
												"{{an_team1_id}}",
												"assets",
												"{{an_team1_asset6_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "User1 - Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstname\": \"an-user1\",\n\t\"lastname\": \"\",\n\t\"email\": \"an-user1@vulcan.example.com\"\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/users/{{an_user1_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{an_user1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User2 - Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstname\": \"an-user1\",\n\t\"lastname\": \"\",\n\t\"email\": \"an-user1@vulcan.example.com\"\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/users/{{an_user2_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{an_user2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team 1 - Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"asset-annotation-team-1\",\n\t\"description\": \"team used to test asset annotations\",\n    \"tag\": \"asset-annotation-team-1\"\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/teams/{{an_team1_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams",
										"{{an_team1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team 2 - Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"asset-annotation-team-1\",\n\t\"description\": \"team used to test asset annotations\",\n    \"tag\": \"asset-annotation-team-1\"\n}"
								},
								"url": {
									"raw": "{{host}}/api/v1/teams/{{an_team2_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teams",
										"{{an_team2_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get user by email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Email is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"email\"));",
							"    pm.environment.set(\"user_id_uuid\", jsonData.id);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/v1/users/{{email}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{email}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/v1/healthcheck",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"healthcheck"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Email is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"email\"));",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/v1/users/{{user_id_uuid}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{user_id_uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should return 422 retrieving user, invalid user UUID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"pm.test(\"Error message indicates malformed ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"ID is malformed\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/v1/users/{{invalid_uuid}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{invalid_uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create team",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Team data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"vulcan-test-team\");",
							"    pm.expect(jsonData.description).to.eql(\"the one and only team\")",
							"    pm.environment.set(\"team_id\", jsonData.id);",
							"    pm.environment.set(\"team_name\", jsonData.name);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"vulcan-test-team\",\n\t\"description\": \"the one and only team\",\n\t\"tag\": \"a.b.c.d\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create other team",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Team data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.name).to.eql(\"security-team\");",
							"    pm.expect(jsonData.description).to.eql(\"a second team\");",
							"    pm.expect(jsonData.tag).to.eql(\"a.b.c.security\");",
							"",
							"    pm.environment.set(\"security_tag\", jsonData.tag);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"security-team\",\n\t\"description\": \"a second team\",\n\t\"tag\": \"a.b.c.security\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams"
					]
				}
			},
			"response": []
		},
		{
			"name": "List teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Team data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/v1/teams",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"user data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.firstname).to.eql(\"first-name\");",
							"     pm.expect(jsonData.lastname).to.eql(\"last-name\");",
							"    pm.expect(jsonData.email).to.eql(\"firstname.lastname@vulcan.example.com\")",
							"    pm.environment.set(\"newUserId\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"firstname\": \"first-name\",\n\t\"lastname\": \"last-name\",\n\t\"email\": \"firstname.lastname@vulcan.example.com\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User With upper case email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"user data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.firstname).to.eql(\"first-name2\");",
							"     pm.expect(jsonData.lastname).to.eql(\"last-name\");",
							"    pm.expect(jsonData.email).to.eql(\"firstname2.lastname@vulcan.example.com\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"firstname\": \"first-name2\",\n\t\"lastname\": \"last-name\",\n\t\"email\": \"FIRSTname2.LASTname@vulcan.example.com\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get team by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Team data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"vulcan-test-team\");",
							"    pm.expect(jsonData.description).to.eql(\"the one and only team\")",
							"    pm.environment.set(\"team_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get team by name",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Team data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"vulcan-test-team\");",
							"    pm.expect(jsonData.description).to.eql(\"the one and only team\")",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_name}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get team by tag",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Team data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"    pm.expect(jsonData[0].name).to.eql(\"security-team\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/v1/teams?tag={{security_tag}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams"
					],
					"query": [
						{
							"key": "tag",
							"value": "{{security_tag}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update team",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Team data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"updated name\");",
							"    //TODO fix pm.expect(jsonData.description).to.eql(\"the one and only team\")",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"updated name\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add user to team by uuid (already member)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"User already exists\", function () {",
							"    var jsonData = pm.response.json();",
							"     pm.expect(jsonData.type).to.eql(\"Duplicated record\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"user_id\": \"{{user_id_uuid}}\",\n\t\"role\": \"owner\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/members",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"members"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add newUser to team as owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"User is added to team with correct response data\", function () {",
							"    var jsonData = pm.response.json();",
							"     pm.expect(jsonData.user.id).to.eql(pm.environment.get(\"newUserId\"));",
							"     pm.expect(jsonData.user.email).to.eql(\"firstname.lastname@vulcan.example.com\");",
							"     pm.expect(jsonData.role).to.eql(\"owner\")",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"user_id\": \"{{newUserId}}\",\n\t\"role\": \"owner\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/members",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"members"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change newUser from owner to member",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User role is changed from owner to member\", function () {",
							"    var jsonData = pm.response.json();",
							"     pm.expect(jsonData.role).to.eql(\"member\");",
							"     pm.expect(jsonData.user.id).to.eql(pm.environment.get(\"newUserId\"))",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"role\": \"member\"}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/members/{{newUserId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"members",
						"{{newUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add unregistered user by email to a team",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"User added\", function () {",
							"    var jsonData = pm.response.json();",
							"     pm.expect(jsonData.role).to.eql(\"member\");",
							"     pm.environment.set(\"user_id2\", jsonData.user.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"email\": \"test@vulcan.example.com\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/members",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"members"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change user from member to owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User role changedadded\", function () {",
							"    var jsonData = pm.response.json();",
							"     pm.expect(jsonData.role).to.eql(\"owner\");",
							"     // todo: fix return data",
							"    //pm.expect(jsonData.user.id).to.eql(pm.environment.get(\"user2_id\"))",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"role\": \"owner\"}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/members/{{user_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"members",
						"{{user_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get team members",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User is owner\", function () {",
							"    var jsonData = pm.response.json();",
							"     pm.expect(jsonData[0].role).to.eql(\"owner\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/members",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"members"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User team is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"     pm.expect(jsonData.length).to.eql(2);",
							"     pm.expect(jsonData[0].name).to.eql(\"security-team\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/v1/users/{{user_id_uuid}}/teams",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{user_id_uuid}}",
						"teams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create default asset-group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Group data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"default\");",
							"    pm.environment.set(\"default_group_id\", jsonData.id);",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\": \"default\",\n\"options\": \"{\\\"some\\\": \\\"options\\\"}\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add ip asset to team",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Asset data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].type.name).to.eql(\"IP\");",
							"    pm.expect(jsonData[0].identifier).to.eql(\"127.0.0.1\");",
							"    pm.expect(jsonData[0].scannable).to.eql(true);",
							"    pm.environment.set(\"asset1\", jsonData[0].id);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n\t\t{\n\t\t\t\"type\": \"IP\",\n\t\t\t\"identifier\": \"127.0.0.1\",\n\t\t\t\"scannable\": true\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add ip asset to team BC request",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Asset data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].type.name).to.eql(\"IP\");",
							"    pm.expect(jsonData[0].identifier).to.eql(\"127.0.0.66\");",
							"    pm.expect(jsonData[0].scannable).to.eql(true);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n\t\t{\n\t\t\t\"type\": \"IP\",\n\t\t\t\"identifier\": \"127.0.0.66\",\n\t\t\t\"scannable\": true\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add ip asset to team BC request ERROR",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Asset data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include(\"pq: duplicate key value violates unique constraint\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n\t\t{\n\t\t\t\"type\": \"IP\",\n\t\t\t\"identifier\": \"127.0.0.66\",\n\t\t\t\"scannable\": true\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add multiple assets, some success, some failure, transaction rolled back",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Asset data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include(\"pq: duplicate key value violates unique\");",
							"});",
							"",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n\t\t{\n\t\t\t\"type\": \"IP\",\n\t\t\t\"identifier\": \"127.0.0.1\",\n\t\t\t\"scannable\": true\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"127.0.0.2\"\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"localhost\"\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"example.com\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add asset with invalid asset type",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Asset not type not found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"[asset][127.0.0.1][xyz] Asset type not found\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n\t\t{\n\t\t\t\"type\": \"xyz\",\n\t\t\t\"identifier\": \"127.0.0.1\",\n\t\t\t\"scannable\": true\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add asset with missing identifier",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Asset not type not found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"Key: 'Asset.Identifier' Error:Field validation for 'Identifier' failed on the 'required' tag\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n\t\t{\n\t\t\t\"type\": \"IP\",\n\t\t\t\"scannable\": true\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add hostname asset to team",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Asset data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].type.name).to.eql(\"Hostname\");",
							"    pm.expect(jsonData[0].identifier).to.eql(\"adevinta.com\");",
							"    pm.expect(jsonData[0].scannable).to.eql(true);",
							"    pm.environment.set(\"asset2\", jsonData[0].id);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n\t{\n\t\"type\": \"Hostname\",\n\t\"identifier\": \"adevinta.com\",\n\t\"scannable\": true\n\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add DomainName asset to team",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Asset data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].type.name).to.eql(\"DomainName\");",
							"    pm.expect(jsonData[0].identifier).to.eql(\"adevinta.com\");",
							"    pm.expect(jsonData[0].scannable).to.eql(true);",
							"    pm.environment.set(\"asset2\", jsonData[0].id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n        {\n            \"type\": \"DomainName\",\n            \"identifier\": \"adevinta.com\",\n            \"scannable\": true\n        }\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add asset with invalid options",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Asset data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"[asset][127.0.1.1][] asset.options field has invalid json\");",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n\t{\n\t\"identifier\": \"127.0.1.1\",\n\t\"options\": \"not valid json\"\n\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add two assets, one with invalid options",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Asset data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"[asset][127.0.1.2][] asset.options field has invalid json\")",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n\t{\n\t\"identifier\": \"127.0.1.2\",\n\t\"options\": \"not valid json\"\n\t},\n\t{\n\t\"identifier\": \"127.0.1.3\",\n\t\"options\": \"{\\\"valid\\\":\\\"json\\\"}\"\n\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all assets for team",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Asset data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(4);",
							"    pm.expect(jsonData[0].type.name).to.eql(\"IP\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all assets for team by Identifier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Asset data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(2);",
							"    pm.expect(jsonData[0].type.name).to.eql(\"Hostname\");",
							"    pm.expect(jsonData[1].type.name).to.eql(\"DomainName\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets?identifier=adevinta.com",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					],
					"query": [
						{
							"key": "identifier",
							"value": "adevinta.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update asset scannable field",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Asset data is updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.scannable).to.eql(false);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"scannable\": false\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets/{{asset1}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets",
						"{{asset1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should forbid asset identifier modification",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"identifier\": \"modified.example.com\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets/{{asset1}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets",
						"{{asset1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create asset-group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Group data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"my group\");",
							"    pm.environment.set(\"group_id\", jsonData.id);",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\": \"my group\",\n\"options\": \"{\\\"some\\\": \\\"options\\\"}\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create asset-group #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Group data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"my group to be deleted\");",
							"    pm.environment.set(\"group_id2\", jsonData.id);",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\": \"my group to be deleted\",\n\"options\": \"{\\\"some\\\": \\\"options\\\"}\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update options for group #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Group data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"my group to be deleted\");",
							"    pm.environment.set(\"group_id2\", jsonData.id);",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"options\": \"{\\\"some\\\": \\\"options updated\\\"}\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups/{{group_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups",
						"{{group_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add asset to group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Group data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"asset1\"));",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"asset_id\": \"{{asset1}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups/{{group_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups",
						"{{group_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should return 422 adding asset to group, invalid group UUID",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Error message indicates malformed ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"ID is malformed\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"asset_id\": \"{{asset1}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups/{{invalid_uuid}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups",
						"{{invalid_uuid}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add asset to group (conflict)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Group data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.type).to.eql(\"Duplicated record\");",
							"    pm.expect(jsonData.error).to.eql(\"asset group relation already exists\");",
							"    pm.expect(jsonData.code).to.eql(409);",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"asset_id\": \"{{asset1}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups/{{group_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups",
						"{{group_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add asset #2 to group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Group data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"asset2\"));",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"asset_id\": \"{{asset2}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups/{{group_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups",
						"{{group_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create existent asset should associate it to group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Asset data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].type.name).to.eql(\"Hostname\");",
							"    pm.expect(jsonData[0].identifier).to.eql(\"adevinta.com\");",
							"    pm.expect(jsonData[0].scannable).to.eql(true);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n\t{\n\t\"type\": \"Hostname\",\n\t\"identifier\": \"adevinta.com\",\n\t\"scannable\": true\n\t}\n\t],\"groups\":[\n\t\"{{group_id2}}\"\n]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create existent asset with already associated group should return conflict",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"assets\": [\n\t{\n\t\"type\": \"Hostname\",\n\t\"identifier\": \"adevinta.com\",\n\t\"scannable\": true\n\t}\n\t],\"groups\":[\n\t\"{{group_id2}}\"\n]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"group data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"group_id\"));",
							"    pm.expect(jsonData.name).to.eql(\"my group\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get global group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"group data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"global-group\"));",
							"    pm.expect(jsonData.name).to.eql(\"default-global\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups/{{global-group}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups",
						"{{global-group}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create policy (for team)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"/* TODO fix return/status code",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"*/",
							"",
							"pm.test(\"Policy data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"my policy\");",
							"    pm.environment.set(\"policy_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"my policy\",\n\t\"global\": true\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/policies",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"policies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"policy is updated \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"my policy updated\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"my policy updated\",\n\t\"global\": true\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/policies/{{policy_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"policies",
						"{{policy_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Checktype Setting",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Checktype setting data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.checktype_name).to.eql(\"my checktype setting\");",
							"    pm.expect(jsonData.options).to.eql(\"{\\\"some\\\": \\\"options\\\"}\");",
							"    pm.environment.set(\"policy_setting_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"checktype_name\": \"my checktype setting\",\n\t\"options\": \"{\\\"some\\\": \\\"options\\\"}\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/policies/{{policy_id}}/settings",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"policies",
						"{{policy_id}}",
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Checktype Setting",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checktype setting data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.checktype_name).to.eql(\"my checktype setting2\");",
							"    pm.expect(jsonData.options).to.eql(\"{\\\"some\\\": \\\"options\\\"}\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"checktype_name\": \"my checktype setting2\",\n\t\"options\": \"{\\\"some\\\": \\\"options\\\"}\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/policies/{{policy_id}}/settings/{{policy_setting_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"policies",
						"{{policy_id}}",
						"settings",
						"{{policy_setting_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create program",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"program data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.policy_groups[0].group.id).to.eql(pm.environment.get(\"group_id\"));",
							"    pm.expect(jsonData.policy_groups[0].policy.id).to.eql(pm.environment.get(\"policy_id\"))",
							"    pm.expect(jsonData.name).to.eql(\"my program\")",
							"    pm.environment.set(\"program_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"my program\",\n    \"cron\": \"some cron\",\n    \"policy_groups\": [\n        {\n            \"group_id\": \"{{group_id}}\",\n            \"policy_id\": \"{{policy_id}}\"\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/programs",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"programs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update program",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"program data is updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.policy_groups[0].group.id).to.eql(pm.environment.get(\"group_id\"));",
							"    pm.expect(jsonData.name).to.eql(\"my program updated\")",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"my program updated\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/programs/{{program_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"programs",
						"{{program_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Disable Program",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"program data is updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.policy_groups[0].group.id).to.eql(pm.environment.get(\"group_id\"));",
							"    pm.expect(jsonData.disabled).to.eql(true)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"disabled\": true\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/programs/{{program_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"programs",
						"{{program_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Enable Program",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"program data is updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.policy_groups[0].group.id).to.eql(pm.environment.get(\"group_id\"));",
							"    pm.expect(jsonData.disabled).to.eql(false)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"disabled\": false\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/programs/{{program_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"programs",
						"{{program_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create scan",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"/*",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"program data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.program.id).to.eql(pm.environment.get(\"program_id\"));",
							"    pm.environment.set(\"scan_id\", jsonData.id);",
							"});",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"scheduled_time\": \"2018-04-19T14:24:57.647044Z\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/programs/{{program_id}}/scans",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"programs",
						"{{program_id}}",
						"scans"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Scan",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"/*",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Scan is updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"scan_id\"));",
							"    pm.expect(jsonData.scheduled_time).to.eql(\"2019-04-19T14:24:57.647044Z\");",
							"",
							"});",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"scheduled_time\": \"2019-04-19T14:24:57.647044Z\",\n\"end_time\": \"2019-04-19T14:24:57.647044Z\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/programs/{{program_id}}/scans/{{scan_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"programs",
						"{{program_id}}",
						"scans",
						"{{scan_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find scans per team/program",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"/*pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"scan data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].program.id).to.eql(pm.environment.get(\"program_id\"));",
							"    pm.environment.set(\"scan_id\", jsonData[0].id);",
							"});",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/programs/{{program_id}}/scans",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"programs",
						"{{program_id}}",
						"scans"
					]
				}
			},
			"response": []
		},
		{
			"name": "Disable Program - 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"program data is updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.policy_groups[0].group.id).to.eql(pm.environment.get(\"group_id\"));",
							"    pm.expect(jsonData.disabled).to.eql(true)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"disabled\": true\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/programs/{{program_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"programs",
						"{{program_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Trigger Scan (disabled program)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"program data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"Program my program updated is disabled. [Program ID: \"+pm.environment.get(\"program_id\")+\"]\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"program_id\": \"{{program_id}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/scans",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"scans"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove user2 from team",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.environment.unset(\"user_id2\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/members/{{user_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"members",
						"{{user_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete asset2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.environment.unset(\"asset2\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/assets/{{asset2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"assets",
						"{{asset2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete asset-group #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.environment.unset(\"group_id2\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups/{{group_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups",
						"{{group_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ungroup asset1 from asset group1",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.environment.unset(\"group_id2\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/groups/{{group_id}}/assets/{{asset1}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"groups",
						"{{group_id}}",
						"assets",
						"{{asset1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.environment.unset(\"policy_id\");",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/policies/{{policy_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"policies",
						"{{policy_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete program",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.environment.unset(\"program_id\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/programs/{{program_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"programs",
						"{{program_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Scan",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"/*",
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.environment.unset(\"scan_id\");",
							"});",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}/programs/{{program_id}}/scans/{{scan_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}",
						"programs",
						"{{program_id}}",
						"scans",
						"{{scan_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete team",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.environment.unset(\"team_id\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/v1/teams/{{team_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"teams",
						"{{team_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "{{host}}/",
			"type": "string"
		}
	]
}

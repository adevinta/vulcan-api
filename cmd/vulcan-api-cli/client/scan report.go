// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "Vulcan-API": scan report Resource Client
//
// Command:
// $ main

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// EmailScanReportPath computes a request path to the email action of scan report.
func EmailScanReportPath(teamID string, scanID string) string {
	param0 := teamID
	param1 := scanID

	return fmt.Sprintf("/api/v1/teams/%s/scans/%s/report/email", param0, param1)
}

// Retrieve the report in html format to be sent by email.
func (c *Client) EmailScanReport(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewEmailScanReportRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewEmailScanReportRequest create the request corresponding to the email action endpoint of the scan report resource.
func (c *Client) NewEmailScanReportRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GenerateScanReportPath computes a request path to the generate action of scan report.
func GenerateScanReportPath(teamID string, scanID string) string {
	param0 := teamID
	param1 := scanID

	return fmt.Sprintf("/api/v1/teams/%s/scans/%s/report", param0, param1)
}

// Triggers report generation. The report will be generated asynchronously on Vulcan Backend.
func (c *Client) GenerateScanReport(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGenerateScanReportRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGenerateScanReportRequest create the request corresponding to the generate action endpoint of the scan report resource.
func (c *Client) NewGenerateScanReportRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// SendScanReportPath computes a request path to the send action of scan report.
func SendScanReportPath(teamID string, scanID string) string {
	param0 := teamID
	param1 := scanID

	return fmt.Sprintf("/api/v1/teams/%s/scans/%s/report/send", param0, param1)
}

// Send the generated report by email to the team recipients.
func (c *Client) SendScanReport(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewSendScanReportRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSendScanReportRequest create the request corresponding to the send action endpoint of the scan report resource.
func (c *Client) NewSendScanReportRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowScanReportPath computes a request path to the show action of scan report.
func ShowScanReportPath(teamID string, scanID string) string {
	param0 := teamID
	param1 := scanID

	return fmt.Sprintf("/api/v1/teams/%s/scans/%s/report", param0, param1)
}

// Show information about a scan report
func (c *Client) ShowScanReport(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowScanReportRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowScanReportRequest create the request corresponding to the show action endpoint of the scan report resource.
func (c *Client) NewShowScanReportRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

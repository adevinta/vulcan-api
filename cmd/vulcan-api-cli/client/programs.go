// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "Vulcan-API": programs Resource Client
//
// Command:
// $ main

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateProgramsPath computes a request path to the create action of programs.
func CreateProgramsPath(teamID string) string {
	param0 := teamID

	return fmt.Sprintf("/api/v1/teams/%s/programs", param0)
}

// Create a new program.
func (c *Client) CreatePrograms(ctx context.Context, path string, payload *ProgramPayload) (*http.Response, error) {
	req, err := c.NewCreateProgramsRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateProgramsRequest create the request corresponding to the create action endpoint of the programs resource.
func (c *Client) NewCreateProgramsRequest(ctx context.Context, path string, payload *ProgramPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteProgramsPath computes a request path to the delete action of programs.
func DeleteProgramsPath(teamID string, programID string) string {
	param0 := teamID
	param1 := programID

	return fmt.Sprintf("/api/v1/teams/%s/programs/%s", param0, param1)
}

// Delete a program.
func (c *Client) DeletePrograms(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteProgramsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteProgramsRequest create the request corresponding to the delete action endpoint of the programs resource.
func (c *Client) NewDeleteProgramsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListProgramsPath computes a request path to the list action of programs.
func ListProgramsPath(teamID string) string {
	param0 := teamID

	return fmt.Sprintf("/api/v1/teams/%s/programs", param0)
}

// List all programs from a team.
func (c *Client) ListPrograms(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListProgramsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListProgramsRequest create the request corresponding to the list action endpoint of the programs resource.
func (c *Client) NewListProgramsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowProgramsPath computes a request path to the show action of programs.
func ShowProgramsPath(teamID string, programID string) string {
	param0 := teamID
	param1 := programID

	return fmt.Sprintf("/api/v1/teams/%s/programs/%s", param0, param1)
}

// Show information about a program.
func (c *Client) ShowPrograms(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowProgramsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowProgramsRequest create the request corresponding to the show action endpoint of the programs resource.
func (c *Client) NewShowProgramsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UpdateProgramsPath computes a request path to the update action of programs.
func UpdateProgramsPath(teamID string, programID string) string {
	param0 := teamID
	param1 := programID

	return fmt.Sprintf("/api/v1/teams/%s/programs/%s", param0, param1)
}

// Update information about a program.
func (c *Client) UpdatePrograms(ctx context.Context, path string, payload *ProgramUpdatePayload) (*http.Response, error) {
	req, err := c.NewUpdateProgramsRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateProgramsRequest create the request corresponding to the update action endpoint of the programs resource.
func (c *Client) NewUpdateProgramsRequest(ctx context.Context, path string, payload *ProgramUpdatePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

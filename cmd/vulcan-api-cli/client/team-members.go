// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "Vulcan-API": team-members Resource Client
//
// Command:
// $ main

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateTeamMembersPath computes a request path to the create action of team-members.
func CreateTeamMembersPath(teamID string) string {
	param0 := teamID

	return fmt.Sprintf("/api/v1/teams/%s/members", param0)
}

// Create a team-member association.
// ---
// At least one of the following fields must be specified: "email", "user_id".
// Otherwise the operation will fail.
// If an email is specified, but the user does not exists on the database yet, a new user will be created for that email.
// ---
// Valid values for 'role' attribute:
// - member
// - owner
func (c *Client) CreateTeamMembers(ctx context.Context, path string, payload *TeamMemberPayload) (*http.Response, error) {
	req, err := c.NewCreateTeamMembersRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateTeamMembersRequest create the request corresponding to the create action endpoint of the team-members resource.
func (c *Client) NewCreateTeamMembersRequest(ctx context.Context, path string, payload *TeamMemberPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteTeamMembersPath computes a request path to the delete action of team-members.
func DeleteTeamMembersPath(teamID string, userID string) string {
	param0 := teamID
	param1 := userID

	return fmt.Sprintf("/api/v1/teams/%s/members/%s", param0, param1)
}

// Delete a member from a team.
func (c *Client) DeleteTeamMembers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteTeamMembersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteTeamMembersRequest create the request corresponding to the delete action endpoint of the team-members resource.
func (c *Client) NewDeleteTeamMembersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListTeamMembersPath computes a request path to the list action of team-members.
func ListTeamMembersPath(teamID string) string {
	param0 := teamID

	return fmt.Sprintf("/api/v1/teams/%s/members", param0)
}

// List all members from a team.
func (c *Client) ListTeamMembers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListTeamMembersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListTeamMembersRequest create the request corresponding to the list action endpoint of the team-members resource.
func (c *Client) NewListTeamMembersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowTeamMembersPath computes a request path to the show action of team-members.
func ShowTeamMembersPath(teamID string, userID string) string {
	param0 := teamID
	param1 := userID

	return fmt.Sprintf("/api/v1/teams/%s/members/%s", param0, param1)
}

// Describe a team-member association.
func (c *Client) ShowTeamMembers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowTeamMembersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowTeamMembersRequest create the request corresponding to the show action endpoint of the team-members resource.
func (c *Client) NewShowTeamMembersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UpdateTeamMembersPath computes a request path to the update action of team-members.
func UpdateTeamMembersPath(teamID string, userID string) string {
	param0 := teamID
	param1 := userID

	return fmt.Sprintf("/api/v1/teams/%s/members/%s", param0, param1)
}

// Update a team-member association.
// Valid values for 'role' attribute: 'member', 'owner'.
func (c *Client) UpdateTeamMembers(ctx context.Context, path string, payload *TeamMemberUpdatePayload) (*http.Response, error) {
	req, err := c.NewUpdateTeamMembersRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateTeamMembersRequest create the request corresponding to the update action endpoint of the team-members resource.
func (c *Client) NewUpdateTeamMembersRequest(ctx context.Context, path string, payload *TeamMemberUpdatePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

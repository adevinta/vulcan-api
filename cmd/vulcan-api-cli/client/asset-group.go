// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "Vulcan-API": asset-group Resource Client
//
// Command:
// $ main

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateAssetGroupPath computes a request path to the create action of asset-group.
func CreateAssetGroupPath(teamID string, groupID string) string {
	param0 := teamID
	param1 := groupID

	return fmt.Sprintf("/api/v1/teams/%s/groups/%s/assets", param0, param1)
}

// Associate an asset to a group.
func (c *Client) CreateAssetGroup(ctx context.Context, path string, payload *AssetGroupPayload) (*http.Response, error) {
	req, err := c.NewCreateAssetGroupRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateAssetGroupRequest create the request corresponding to the create action endpoint of the asset-group resource.
func (c *Client) NewCreateAssetGroupRequest(ctx context.Context, path string, payload *AssetGroupPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteAssetGroupPath computes a request path to the delete action of asset-group.
func DeleteAssetGroupPath(teamID string, groupID string, assetID string) string {
	param0 := teamID
	param1 := groupID
	param2 := assetID

	return fmt.Sprintf("/api/v1/teams/%s/groups/%s/assets/%s", param0, param1, param2)
}

// Remove an asset from a group.
func (c *Client) DeleteAssetGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteAssetGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteAssetGroupRequest create the request corresponding to the delete action endpoint of the asset-group resource.
func (c *Client) NewDeleteAssetGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListAssetGroupPath computes a request path to the list action of asset-group.
func ListAssetGroupPath(teamID string, groupID string) string {
	param0 := teamID
	param1 := groupID

	return fmt.Sprintf("/api/v1/teams/%s/groups/%s/assets", param0, param1)
}

// List all assets from a group.
func (c *Client) ListAssetGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListAssetGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAssetGroupRequest create the request corresponding to the list action endpoint of the asset-group resource.
func (c *Client) NewListAssetGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

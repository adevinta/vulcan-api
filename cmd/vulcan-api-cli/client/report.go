// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "Vulcan-API": report Resource Client
//
// Command:
// $ main

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// SendDigestReportPath computes a request path to the send digest action of report.
func SendDigestReportPath(teamID string) string {
	param0 := teamID

	return fmt.Sprintf("/api/v1/teams/%s/report/digest", param0)
}

// Send digest report.
// If no dates are specified, the time range will be set for the last 30 days.
func (c *Client) SendDigestReport(ctx context.Context, path string, payload *DigestPayload) (*http.Response, error) {
	req, err := c.NewSendDigestReportRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSendDigestReportRequest create the request corresponding to the send digest action endpoint of the report resource.
func (c *Client) NewSendDigestReportRequest(ctx context.Context, path string, payload *DigestPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

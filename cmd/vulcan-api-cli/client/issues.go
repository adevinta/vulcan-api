// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "Vulcan-API": issues Resource Client
//
// Command:
// $ main

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListIssuesPath computes a request path to the list action of issues.
func ListIssuesPath() string {

	return fmt.Sprintf("/api/v1/issues/")
}

// List all the issues.
func (c *Client) ListIssues(ctx context.Context, path string, page *float64, size *float64) (*http.Response, error) {
	req, err := c.NewListIssuesRequest(ctx, path, page, size)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListIssuesRequest create the request corresponding to the list action endpoint of the issues resource.
func (c *Client) NewListIssuesRequest(ctx context.Context, path string, page *float64, size *float64) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if page != nil {
		tmp134 := strconv.FormatFloat(*page, 'f', -1, 64)
		values.Set("page", tmp134)
	}
	if size != nil {
		tmp135 := strconv.FormatFloat(*size, 'f', -1, 64)
		values.Set("size", tmp135)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "Vulcan-API": Application Media Types
//
// Command:
// $ main

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
)

// Asset (default view)
//
// Identifier: asset; view=default
type Asset struct {
	// Alias
	Alias       *string           `form:"alias,omitempty" json:"alias,omitempty" yaml:"alias,omitempty" xml:"alias,omitempty"`
	Annotations map[string]string `form:"annotations,omitempty" json:"annotations,omitempty" yaml:"annotations,omitempty" xml:"annotations,omitempty"`
	// Classified At
	ClassifiedAt *string `form:"classified_at,omitempty" json:"classified_at,omitempty" yaml:"classified_at,omitempty" xml:"classified_at,omitempty"`
	// Environmental CVSS
	EnvironmentalCvss *string `form:"environmental_cvss,omitempty" json:"environmental_cvss,omitempty" yaml:"environmental_cvss,omitempty" xml:"environmental_cvss,omitempty"`
	// Asset ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" yaml:"identifier,omitempty" xml:"identifier,omitempty"`
	// Options
	Options *string `form:"options,omitempty" json:"options,omitempty" yaml:"options,omitempty" xml:"options,omitempty"`
	// Rolfp plus scope vector
	Rolfp *string `form:"rolfp,omitempty" json:"rolfp,omitempty" yaml:"rolfp,omitempty" xml:"rolfp,omitempty"`
	// Scannable
	Scannable *bool `form:"scannable,omitempty" json:"scannable,omitempty" yaml:"scannable,omitempty" xml:"scannable,omitempty"`
	// Type
	Type *Assettype `form:"type,omitempty" json:"type,omitempty" yaml:"type,omitempty" xml:"type,omitempty"`
}

// DecodeAsset decodes the Asset instance encoded in resp body.
func (c *Client) DecodeAsset(resp *http.Response) (*Asset, error) {
	var decoded Asset
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AssetCollection is the media type for an array of Asset (default view)
//
// Identifier: asset; type=collection; view=default
type AssetCollection []*Asset

// DecodeAssetCollection decodes the AssetCollection instance encoded in resp body.
func (c *Client) DecodeAssetCollection(resp *http.Response) (AssetCollection, error) {
	var decoded AssetCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Asset Annotations (default view)
//
// Identifier: assetannotations_response; view=default
type AssetannotationsResponse struct {
	Annotations map[string]string `form:"annotations,omitempty" json:"annotations,omitempty" yaml:"annotations,omitempty" xml:"annotations,omitempty"`
}

// DecodeAssetannotationsResponse decodes the AssetannotationsResponse instance encoded in resp body.
func (c *Client) DecodeAssetannotationsResponse(resp *http.Response) (*AssetannotationsResponse, error) {
	var decoded AssetannotationsResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Create Assets Errors (default view)
//
// Identifier: asseterror; view=default
type Asseterror struct {
	// Error
	Error *string `form:"error,omitempty" json:"error,omitempty" yaml:"error,omitempty" xml:"error,omitempty"`
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
}

// DecodeAsseterror decodes the Asseterror instance encoded in resp body.
func (c *Client) DecodeAsseterror(resp *http.Response) (*Asseterror, error) {
	var decoded Asseterror
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AsseterrorCollection is the media type for an array of Asseterror (default view)
//
// Identifier: asseterror; type=collection; view=default
type AsseterrorCollection []*Asseterror

// DecodeAsseterrorCollection decodes the AsseterrorCollection instance encoded in resp body.
func (c *Client) DecodeAsseterrorCollection(resp *http.Response) (AsseterrorCollection, error) {
	var decoded AsseterrorCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Asset group (default view)
//
// Identifier: assetgroup; view=default
type Assetgroup struct {
	// Asset
	Asset *Asset `form:"asset,omitempty" json:"asset,omitempty" yaml:"asset,omitempty" xml:"asset,omitempty"`
	// Group
	Group *Group `form:"group,omitempty" json:"group,omitempty" yaml:"group,omitempty" xml:"group,omitempty"`
}

// DecodeAssetgroup decodes the Assetgroup instance encoded in resp body.
func (c *Client) DecodeAssetgroup(resp *http.Response) (*Assetgroup, error) {
	var decoded Assetgroup
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Asset (default view)
//
// Identifier: assetresponse; view=default
type Assetresponse struct {
	// Alias
	Alias *string `form:"alias,omitempty" json:"alias,omitempty" yaml:"alias,omitempty" xml:"alias,omitempty"`
	// Classified At
	ClassifiedAt *string `form:"classified_at,omitempty" json:"classified_at,omitempty" yaml:"classified_at,omitempty" xml:"classified_at,omitempty"`
	// Environmental CVSS
	EnvironmentalCvss *string `form:"environmental_cvss,omitempty" json:"environmental_cvss,omitempty" yaml:"environmental_cvss,omitempty" xml:"environmental_cvss,omitempty"`
	// Asset ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" yaml:"identifier,omitempty" xml:"identifier,omitempty"`
	// Options
	Options *string `form:"options,omitempty" json:"options,omitempty" yaml:"options,omitempty" xml:"options,omitempty"`
	// Rolfp plus scope vector
	Rolfp *string `form:"rolfp,omitempty" json:"rolfp,omitempty" yaml:"rolfp,omitempty" xml:"rolfp,omitempty"`
	// Scannable
	Scannable *bool `form:"scannable,omitempty" json:"scannable,omitempty" yaml:"scannable,omitempty" xml:"scannable,omitempty"`
	// Status
	Status *Error `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
	// Type
	Type *Assettype `form:"type,omitempty" json:"type,omitempty" yaml:"type,omitempty" xml:"type,omitempty"`
}

// Validate validates the Assetresponse media type instance.
func (mt *Assetresponse) Validate() (err error) {
	if mt.Status != nil {
		if err2 := mt.Status.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeAssetresponse decodes the Assetresponse instance encoded in resp body.
func (c *Client) DecodeAssetresponse(resp *http.Response) (*Assetresponse, error) {
	var decoded Assetresponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AssetresponseCollection is the media type for an array of Assetresponse (default view)
//
// Identifier: assetresponse; type=collection; view=default
type AssetresponseCollection []*Assetresponse

// Validate validates the AssetresponseCollection media type instance.
func (mt AssetresponseCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAssetresponseCollection decodes the AssetresponseCollection instance encoded in resp body.
func (c *Client) DecodeAssetresponseCollection(resp *http.Response) (AssetresponseCollection, error) {
	var decoded AssetresponseCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Asset Type (default view)
//
// Identifier: assettype; view=default
type Assettype struct {
	// Asset Type ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// DecodeAssettype decodes the Assettype instance encoded in resp body.
func (c *Client) DecodeAssettype(resp *http.Response) (*Assettype, error) {
	var decoded Assettype
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// attachment (default view)
//
// Identifier: attachment; view=default
type Attachment struct {
	// Content Type of the attachment
	ContentType *string `form:"content_type,omitempty" json:"content_type,omitempty" yaml:"content_type,omitempty" xml:"content_type,omitempty"`
	// attachment data
	Data interface{} `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
	// Attachment name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// DecodeAttachment decodes the Attachment instance encoded in resp body.
func (c *Client) DecodeAttachment(resp *http.Response) (*Attachment, error) {
	var decoded Attachment
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Create Assets (default view)
//
// Identifier: create_assets; view=default
type CreateAssets struct {
	// Assets
	Assets AssetCollection `form:"assets,omitempty" json:"assets,omitempty" yaml:"assets,omitempty" xml:"assets,omitempty"`
	// Errors
	Errors AsseterrorCollection `form:"errors,omitempty" json:"errors,omitempty" yaml:"errors,omitempty" xml:"errors,omitempty"`
}

// DecodeCreateAssets decodes the CreateAssets instance encoded in resp body.
func (c *Client) DecodeCreateAssets(resp *http.Response) (*CreateAssets, error) {
	var decoded CreateAssets
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Current exposure stats (default view)
//
// Identifier: current_exposure; view=default
type CurrentExposure struct {
	// Stats for current exposure by different averages
	CurrentExposure *Statsaverages `form:"current_exposure,omitempty" json:"current_exposure,omitempty" yaml:"current_exposure,omitempty" xml:"current_exposure,omitempty"`
}

// DecodeCurrentExposure decodes the CurrentExposure instance encoded in resp body.
func (c *Client) DecodeCurrentExposure(resp *http.Response) (*CurrentExposure, error) {
	var decoded CurrentExposure
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Error (default view)
//
// Identifier: error; view=default
type Error struct {
	// Code
	Code int `form:"code" json:"code" yaml:"code" xml:"code"`
	// Error
	Error string `form:"error" json:"error" yaml:"error" xml:"error"`
	// Type
	Type string `form:"type" json:"type" yaml:"type" xml:"type"`
}

// Validate validates the Error media type instance.
func (mt *Error) Validate() (err error) {

	if mt.Error == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "error"))
	}
	if mt.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "type"))
	}
	return
}

// DecodeError decodes the Error instance encoded in resp body.
func (c *Client) DecodeError(resp *http.Response) (*Error, error) {
	var decoded Error
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Exposure stats (default view)
//
// Identifier: exposure; view=default
type Exposure struct {
	// Stats for exposure by different averages
	Exposure *Statsaverages `form:"exposure,omitempty" json:"exposure,omitempty" yaml:"exposure,omitempty" xml:"exposure,omitempty"`
}

// DecodeExposure decodes the Exposure instance encoded in resp body.
func (c *Client) DecodeExposure(resp *http.Response) (*Exposure, error) {
	var decoded Exposure
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Finding (default view)
//
// Identifier: finding; view=default
type Finding struct {
	// Affected Resource
	AffectedResource *string `form:"affected_resource,omitempty" json:"affected_resource,omitempty" yaml:"affected_resource,omitempty" xml:"affected_resource,omitempty"`
	// Attachments
	Attachments []*Attachment `form:"attachments,omitempty" json:"attachments,omitempty" yaml:"attachments,omitempty" xml:"attachments,omitempty"`
	// Current exposure (hours). Only for OPEN findings
	CurrentExposure *float64 `form:"current_exposure,omitempty" json:"current_exposure,omitempty" yaml:"current_exposure,omitempty" xml:"current_exposure,omitempty"`
	// Details
	Details *string `form:"details,omitempty" json:"details,omitempty" yaml:"details,omitempty" xml:"details,omitempty"`
	// Finding ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Impact details
	ImpactDetails *string `form:"impact_details,omitempty" json:"impact_details,omitempty" yaml:"impact_details,omitempty" xml:"impact_details,omitempty"`
	// Issue
	Issue *Issue `form:"issue,omitempty" json:"issue,omitempty" yaml:"issue,omitempty" xml:"issue,omitempty"`
	// Resources
	Resources []*Resource `form:"resources,omitempty" json:"resources,omitempty" yaml:"resources,omitempty" xml:"resources,omitempty"`
	// Score
	Score *float64 `form:"score,omitempty" json:"score,omitempty" yaml:"score,omitempty" xml:"score,omitempty"`
	// Source
	Source *Source `form:"source,omitempty" json:"source,omitempty" yaml:"source,omitempty" xml:"source,omitempty"`
	// Status
	Status *string `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
	// Target
	Target *Target `form:"target,omitempty" json:"target,omitempty" yaml:"target,omitempty" xml:"target,omitempty"`
	// Total exposure (hours)
	TotalExposure *float64 `form:"total_exposure,omitempty" json:"total_exposure,omitempty" yaml:"total_exposure,omitempty" xml:"total_exposure,omitempty"`
	// Link to the ticket
	URLTracker *string `form:"url_tracker,omitempty" json:"url_tracker,omitempty" yaml:"url_tracker,omitempty" xml:"url_tracker,omitempty"`
}

// DecodeFinding decodes the Finding instance encoded in resp body.
func (c *Client) DecodeFinding(resp *http.Response) (*Finding, error) {
	var decoded Finding
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// FindingCollection is the media type for an array of Finding (default view)
//
// Identifier: finding; type=collection; view=default
type FindingCollection []*Finding

// DecodeFindingCollection decodes the FindingCollection instance encoded in resp body.
func (c *Client) DecodeFindingCollection(resp *http.Response) (FindingCollection, error) {
	var decoded FindingCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Finding Overwrite (default view)
//
// Identifier: finding_overwrite; view=default
type FindingOverwrite struct {
	// Creation time
	CreatedAt *time.Time `form:"created_at,omitempty" json:"created_at,omitempty" yaml:"created_at,omitempty" xml:"created_at,omitempty"`
	// Finding ID
	FindingID *string `form:"finding_id,omitempty" json:"finding_id,omitempty" yaml:"finding_id,omitempty" xml:"finding_id,omitempty"`
	// Finding Overwrite ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Complementary information
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" yaml:"notes,omitempty" xml:"notes,omitempty"`
	// The status requested for the finding referenced by the finding_id field
	Status *string `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
	// The previous status for the finding referenced by the finding_id field
	StatusPrevious *string `form:"status_previous,omitempty" json:"status_previous,omitempty" yaml:"status_previous,omitempty" xml:"status_previous,omitempty"`
	// The ID associated to the team who requested this overwrite
	TeamID *string `form:"team_id,omitempty" json:"team_id,omitempty" yaml:"team_id,omitempty" xml:"team_id,omitempty"`
	// User who requested the finding overwrite
	User *string `form:"user,omitempty" json:"user,omitempty" yaml:"user,omitempty" xml:"user,omitempty"`
}

// DecodeFindingOverwrite decodes the FindingOverwrite instance encoded in resp body.
func (c *Client) DecodeFindingOverwrite(resp *http.Response) (*FindingOverwrite, error) {
	var decoded FindingOverwrite
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Finding_overwriteCollection is the media type for an array of Finding_overwrite (default view)
//
// Identifier: finding_overwrite; type=collection; view=default
type FindingOverwriteCollection []*FindingOverwrite

// DecodeFindingOverwriteCollection decodes the FindingOverwriteCollection instance encoded in resp body.
func (c *Client) DecodeFindingOverwriteCollection(resp *http.Response) (FindingOverwriteCollection, error) {
	var decoded FindingOverwriteCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Finding Ticket Creation (default view)
//
// Identifier: finding_ticketcreation; view=default
type FindingTicketcreation struct {
	// The previous status for the finding referenced by the finding_id field
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	// Finding ID
	FindingID *string `form:"finding_id,omitempty" json:"finding_id,omitempty" yaml:"finding_id,omitempty" xml:"finding_id,omitempty"`
	// The summary of the ticket
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" yaml:"summary,omitempty" xml:"summary,omitempty"`
	// The ID associated to the team who requested this ticket creation
	TeamID *string `form:"team_id,omitempty" json:"team_id,omitempty" yaml:"team_id,omitempty" xml:"team_id,omitempty"`
	// Link to the ticket
	URLTracker *string `form:"url_tracker,omitempty" json:"url_tracker,omitempty" yaml:"url_tracker,omitempty" xml:"url_tracker,omitempty"`
}

// DecodeFindingTicketcreation decodes the FindingTicketcreation instance encoded in resp body.
func (c *Client) DecodeFindingTicketcreation(resp *http.Response) (*FindingTicketcreation, error) {
	var decoded FindingTicketcreation
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Findings by Issue (default view)
//
// Identifier: findings_issue; view=default
type FindingsIssue struct {
	// Issue ID
	IssueID *string `form:"issue_id,omitempty" json:"issue_id,omitempty" yaml:"issue_id,omitempty" xml:"issue_id,omitempty"`
	// Max score for the issue among the affected assets
	MaxScore *float64 `form:"max_score,omitempty" json:"max_score,omitempty" yaml:"max_score,omitempty" xml:"max_score,omitempty"`
	// Number of affected resources by the issue
	ResourcesCount *float64 `form:"resources_count,omitempty" json:"resources_count,omitempty" yaml:"resources_count,omitempty" xml:"resources_count,omitempty"`
	// Issue summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" yaml:"summary,omitempty" xml:"summary,omitempty"`
	// Number of targets affected by the issue
	TargetsCount *float64 `form:"targets_count,omitempty" json:"targets_count,omitempty" yaml:"targets_count,omitempty" xml:"targets_count,omitempty"`
}

// DecodeFindingsIssue decodes the FindingsIssue instance encoded in resp body.
func (c *Client) DecodeFindingsIssue(resp *http.Response) (*FindingsIssue, error) {
	var decoded FindingsIssue
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Findings_issueCollection is the media type for an array of Findings_issue (default view)
//
// Identifier: findings_issue; type=collection; view=default
type FindingsIssueCollection []*FindingsIssue

// DecodeFindingsIssueCollection decodes the FindingsIssueCollection instance encoded in resp body.
func (c *Client) DecodeFindingsIssueCollection(resp *http.Response) (FindingsIssueCollection, error) {
	var decoded FindingsIssueCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Findings by Issue list (default view)
//
// Identifier: findings_issues_list; view=default
type FindingsIssuesList struct {
	// List of affected assets by issue
	Issues FindingsIssueCollection `form:"issues,omitempty" json:"issues,omitempty" yaml:"issues,omitempty" xml:"issues,omitempty"`
	// Pagination info
	Pagination *Pagination `form:"pagination,omitempty" json:"pagination,omitempty" yaml:"pagination,omitempty" xml:"pagination,omitempty"`
}

// DecodeFindingsIssuesList decodes the FindingsIssuesList instance encoded in resp body.
func (c *Client) DecodeFindingsIssuesList(resp *http.Response) (*FindingsIssuesList, error) {
	var decoded FindingsIssuesList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Findings Labels (default view)
//
// Identifier: findings_labels; view=default
type FindingsLabels struct {
	// associated labels
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" yaml:"labels,omitempty" xml:"labels,omitempty"`
}

// DecodeFindingsLabels decodes the FindingsLabels instance encoded in resp body.
func (c *Client) DecodeFindingsLabels(resp *http.Response) (*FindingsLabels, error) {
	var decoded FindingsLabels
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Findings list (default view)
//
// Identifier: findings_list; view=default
type FindingsList struct {
	// List of findings
	Findings FindingCollection `form:"findings,omitempty" json:"findings,omitempty" yaml:"findings,omitempty" xml:"findings,omitempty"`
	// Pagination info
	Pagination *Pagination `form:"pagination,omitempty" json:"pagination,omitempty" yaml:"pagination,omitempty" xml:"pagination,omitempty"`
}

// DecodeFindingsList decodes the FindingsList instance encoded in resp body.
func (c *Client) DecodeFindingsList(resp *http.Response) (*FindingsList, error) {
	var decoded FindingsList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Findings by Target (default view)
//
// Identifier: findings_target; view=default
type FindingsTarget struct {
	// Number of findings for the target
	FindingsCount *float64 `form:"findings_count,omitempty" json:"findings_count,omitempty" yaml:"findings_count,omitempty" xml:"findings_count,omitempty"`
	// Target Identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" yaml:"identifier,omitempty" xml:"identifier,omitempty"`
	// Number of issues for the target
	IssuesCount *float64 `form:"issues_count,omitempty" json:"issues_count,omitempty" yaml:"issues_count,omitempty" xml:"issues_count,omitempty"`
	// Max score for the issue among the affected assets
	MaxScore *float64 `form:"max_score,omitempty" json:"max_score,omitempty" yaml:"max_score,omitempty" xml:"max_score,omitempty"`
	// Target ID
	TargetID *string `form:"target_id,omitempty" json:"target_id,omitempty" yaml:"target_id,omitempty" xml:"target_id,omitempty"`
}

// DecodeFindingsTarget decodes the FindingsTarget instance encoded in resp body.
func (c *Client) DecodeFindingsTarget(resp *http.Response) (*FindingsTarget, error) {
	var decoded FindingsTarget
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Findings_targetCollection is the media type for an array of Findings_target (default view)
//
// Identifier: findings_target; type=collection; view=default
type FindingsTargetCollection []*FindingsTarget

// DecodeFindingsTargetCollection decodes the FindingsTargetCollection instance encoded in resp body.
func (c *Client) DecodeFindingsTargetCollection(resp *http.Response) (FindingsTargetCollection, error) {
	var decoded FindingsTargetCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Findings by Target list (default view)
//
// Identifier: findings_targets_list; view=default
type FindingsTargetsList struct {
	// Pagination info
	Pagination *Pagination `form:"pagination,omitempty" json:"pagination,omitempty" yaml:"pagination,omitempty" xml:"pagination,omitempty"`
	// List of findings per asset
	Targets FindingsTargetCollection `form:"targets,omitempty" json:"targets,omitempty" yaml:"targets,omitempty" xml:"targets,omitempty"`
}

// DecodeFindingsTargetsList decodes the FindingsTargetsList instance encoded in resp body.
func (c *Client) DecodeFindingsTargetsList(resp *http.Response) (*FindingsTargetsList, error) {
	var decoded FindingsTargetsList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Group (WithoutAssetsCount view)
//
// Identifier: group; view=WithoutAssetsCount
type GroupWithoutAssetsCount struct {
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	// Group ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// Options
	Options *string `form:"options,omitempty" json:"options,omitempty" yaml:"options,omitempty" xml:"options,omitempty"`
}

// Group (default view)
//
// Identifier: group; view=default
type Group struct {
	// Assets Count
	AssetsCount *int `form:"assets_count,omitempty" json:"assets_count,omitempty" yaml:"assets_count,omitempty" xml:"assets_count,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	// Group ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// Options
	Options *string `form:"options,omitempty" json:"options,omitempty" yaml:"options,omitempty" xml:"options,omitempty"`
}

// DecodeGroupWithoutAssetsCount decodes the GroupWithoutAssetsCount instance encoded in resp body.
func (c *Client) DecodeGroupWithoutAssetsCount(resp *http.Response) (*GroupWithoutAssetsCount, error) {
	var decoded GroupWithoutAssetsCount
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeGroup decodes the Group instance encoded in resp body.
func (c *Client) DecodeGroup(resp *http.Response) (*Group, error) {
	var decoded Group
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// GroupCollection is the media type for an array of Group (WithoutAssetsCount view)
//
// Identifier: group; type=collection; view=WithoutAssetsCount
type GroupWithoutAssetsCountCollection []*GroupWithoutAssetsCount

// GroupCollection is the media type for an array of Group (default view)
//
// Identifier: group; type=collection; view=default
type GroupCollection []*Group

// DecodeGroupWithoutAssetsCountCollection decodes the GroupWithoutAssetsCountCollection instance encoded in resp body.
func (c *Client) DecodeGroupWithoutAssetsCountCollection(resp *http.Response) (GroupWithoutAssetsCountCollection, error) {
	var decoded GroupWithoutAssetsCountCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeGroupCollection decodes the GroupCollection instance encoded in resp body.
func (c *Client) DecodeGroupCollection(resp *http.Response) (GroupCollection, error) {
	var decoded GroupCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Healthcheck (default view)
//
// Identifier: healthcheck; view=default
type Healthcheck struct {
	// Status
	Status *string `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
}

// DecodeHealthcheck decodes the Healthcheck instance encoded in resp body.
func (c *Client) DecodeHealthcheck(resp *http.Response) (*Healthcheck, error) {
	var decoded Healthcheck
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Issue (default view)
//
// Identifier: issue; view=default
type Issue struct {
	// Common Weakness Enumeration ID
	CweID *float64 `form:"cwe_id,omitempty" json:"cwe_id,omitempty" yaml:"cwe_id,omitempty" xml:"cwe_id,omitempty"`
	// Issue description
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	// Issue ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Associated labels
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" yaml:"labels,omitempty" xml:"labels,omitempty"`
	// Recommendations to fix the issue
	Recommendations []string `form:"recommendations,omitempty" json:"recommendations,omitempty" yaml:"recommendations,omitempty" xml:"recommendations,omitempty"`
	// Documentation reference for the issue
	ReferenceLinks []string `form:"reference_links,omitempty" json:"reference_links,omitempty" yaml:"reference_links,omitempty" xml:"reference_links,omitempty"`
	// Issue summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" yaml:"summary,omitempty" xml:"summary,omitempty"`
}

// DecodeIssue decodes the Issue instance encoded in resp body.
func (c *Client) DecodeIssue(resp *http.Response) (*Issue, error) {
	var decoded Issue
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Job (default view)
//
// Identifier: job; view=default
type Job struct {
	// Job ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Operation that triggered the job
	Operation *string `form:"operation,omitempty" json:"operation,omitempty" yaml:"operation,omitempty" xml:"operation,omitempty"`
	// Result of the job operation
	Result *struct {
		// Optionally populated field when the job finishes correctly, that returns execution related data. The format of the data is defined per operation type
		Data interface{} `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
		// When not empty indicates that the job failed
		Error *string `form:"error,omitempty" json:"error,omitempty" yaml:"error,omitempty" xml:"error,omitempty"`
	} `form:"result,omitempty" json:"result,omitempty" yaml:"result,omitempty" xml:"result,omitempty"`
	// Indicates the status of the operation. The possible values are:
	// 	- 'PENDING': The job has been noted and is pending to be processed
	// 	- 'RUNNING': The job is on execution
	// 	- 'DONE': The job has finished, either successfully or unsuccesfully. Result.error needs to be processed to determine it
	Status *string `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
	// Team ID
	TeamID *string `form:"team_id,omitempty" json:"team_id,omitempty" yaml:"team_id,omitempty" xml:"team_id,omitempty"`
}

// DecodeJob decodes the Job instance encoded in resp body.
func (c *Client) DecodeJob(resp *http.Response) (*Job, error) {
	var decoded Job
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// List Asset Entry (default view)
//
// Identifier: listassetentry; view=default
type Listassetentry struct {
	// Alias
	Alias       *string           `form:"alias,omitempty" json:"alias,omitempty" yaml:"alias,omitempty" xml:"alias,omitempty"`
	Annotations map[string]string `form:"annotations,omitempty" json:"annotations,omitempty" yaml:"annotations,omitempty" xml:"annotations,omitempty"`
	// Classified At
	ClassifiedAt *string `form:"classified_at,omitempty" json:"classified_at,omitempty" yaml:"classified_at,omitempty" xml:"classified_at,omitempty"`
	// Environmental CVSS
	EnvironmentalCvss *string `form:"environmental_cvss,omitempty" json:"environmental_cvss,omitempty" yaml:"environmental_cvss,omitempty" xml:"environmental_cvss,omitempty"`
	// Groups
	Groups GroupWithoutAssetsCountCollection `form:"groups,omitempty" json:"groups,omitempty" yaml:"groups,omitempty" xml:"groups,omitempty"`
	// Asset ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" yaml:"identifier,omitempty" xml:"identifier,omitempty"`
	// Options
	Options *string `form:"options,omitempty" json:"options,omitempty" yaml:"options,omitempty" xml:"options,omitempty"`
	// Rolfp plus scope vector
	Rolfp *string `form:"rolfp,omitempty" json:"rolfp,omitempty" yaml:"rolfp,omitempty" xml:"rolfp,omitempty"`
	// Scannable
	Scannable *bool `form:"scannable,omitempty" json:"scannable,omitempty" yaml:"scannable,omitempty" xml:"scannable,omitempty"`
	// Type
	Type *Assettype `form:"type,omitempty" json:"type,omitempty" yaml:"type,omitempty" xml:"type,omitempty"`
}

// DecodeListassetentry decodes the Listassetentry instance encoded in resp body.
func (c *Client) DecodeListassetentry(resp *http.Response) (*Listassetentry, error) {
	var decoded Listassetentry
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// ListassetentryCollection is the media type for an array of Listassetentry (default view)
//
// Identifier: listassetentry; type=collection; view=default
type ListassetentryCollection []*Listassetentry

// DecodeListassetentryCollection decodes the ListassetentryCollection instance encoded in resp body.
func (c *Client) DecodeListassetentryCollection(resp *http.Response) (ListassetentryCollection, error) {
	var decoded ListassetentryCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// List asset group (default view)
//
// Identifier: listassetgroup; view=default
type Listassetgroup struct {
	// Asset
	Assets AssetCollection `form:"assets,omitempty" json:"assets,omitempty" yaml:"assets,omitempty" xml:"assets,omitempty"`
	// Group
	Group *Group `form:"group,omitempty" json:"group,omitempty" yaml:"group,omitempty" xml:"group,omitempty"`
}

// DecodeListassetgroup decodes the Listassetgroup instance encoded in resp body.
func (c *Client) DecodeListassetgroup(resp *http.Response) (*Listassetgroup, error) {
	var decoded Listassetgroup
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// MTTR stats (default view)
//
// Identifier: mttr; view=default
type Mttr struct {
	// Stats for MTTR by severity
	Mttr *Statstotal `form:"mttr,omitempty" json:"mttr,omitempty" yaml:"mttr,omitempty" xml:"mttr,omitempty"`
}

// DecodeMttr decodes the Mttr instance encoded in resp body.
func (c *Client) DecodeMttr(resp *http.Response) (*Mttr, error) {
	var decoded Mttr
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Pagination info (default view)
//
// Identifier: pagination; view=default
type Pagination struct {
	// Limit of results for the list
	Limit *float64 `form:"limit,omitempty" json:"limit,omitempty" yaml:"limit,omitempty" xml:"limit,omitempty"`
	// Indicates if there are more results to query for the list
	More *bool `form:"more,omitempty" json:"more,omitempty" yaml:"more,omitempty" xml:"more,omitempty"`
	// Results list offset
	Offset *float64 `form:"offset,omitempty" json:"offset,omitempty" yaml:"offset,omitempty" xml:"offset,omitempty"`
	// Total number of results for the list
	Total *float64 `form:"total,omitempty" json:"total,omitempty" yaml:"total,omitempty" xml:"total,omitempty"`
}

// DecodePagination decodes the Pagination instance encoded in resp body.
func (c *Client) DecodePagination(resp *http.Response) (*Pagination, error) {
	var decoded Pagination
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Policy (default view)
//
// Identifier: policy; view=default
type Policy struct {
	// Policy ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// Policy settings count
	SettingsCount *int `form:"settings_count,omitempty" json:"settings_count,omitempty" yaml:"settings_count,omitempty" xml:"settings_count,omitempty"`
}

// DecodePolicy decodes the Policy instance encoded in resp body.
func (c *Client) DecodePolicy(resp *http.Response) (*Policy, error) {
	var decoded Policy
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// PolicyCollection is the media type for an array of Policy (default view)
//
// Identifier: policy; type=collection; view=default
type PolicyCollection []*Policy

// DecodePolicyCollection decodes the PolicyCollection instance encoded in resp body.
func (c *Client) DecodePolicyCollection(resp *http.Response) (PolicyCollection, error) {
	var decoded PolicyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Policy Setting (default view)
//
// Identifier: policysetting; view=default
type Policysetting struct {
	// Check Type Name
	ChecktypeName *string `form:"checktype_name,omitempty" json:"checktype_name,omitempty" yaml:"checktype_name,omitempty" xml:"checktype_name,omitempty"`
	// Policy ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// options
	Options *string `form:"options,omitempty" json:"options,omitempty" yaml:"options,omitempty" xml:"options,omitempty"`
}

// DecodePolicysetting decodes the Policysetting instance encoded in resp body.
func (c *Client) DecodePolicysetting(resp *http.Response) (*Policysetting, error) {
	var decoded Policysetting
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// PolicysettingCollection is the media type for an array of Policysetting (default view)
//
// Identifier: policysetting; type=collection; view=default
type PolicysettingCollection []*Policysetting

// DecodePolicysettingCollection decodes the PolicysettingCollection instance encoded in resp body.
func (c *Client) DecodePolicysettingCollection(resp *http.Response) (PolicysettingCollection, error) {
	var decoded PolicysettingCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Program (default view)
//
// Identifier: program; view=default
type Program struct {
	// Autosend
	Autosend *bool `form:"autosend,omitempty" json:"autosend,omitempty" yaml:"autosend,omitempty" xml:"autosend,omitempty"`
	// Disabled
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty" yaml:"disabled,omitempty" xml:"disabled,omitempty"`
	// Global
	Global *bool `form:"global,omitempty" json:"global,omitempty" yaml:"global,omitempty" xml:"global,omitempty"`
	// Program ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// PolicyGroup
	PolicyGroups []*ProgramPolicyGroup `form:"policy_groups,omitempty" json:"policy_groups,omitempty" yaml:"policy_groups,omitempty" xml:"policy_groups,omitempty"`
	// Schedule
	Schedule *Schedule `form:"schedule,omitempty" json:"schedule,omitempty" yaml:"schedule,omitempty" xml:"schedule,omitempty"`
}

// Validate validates the Program media type instance.
func (mt *Program) Validate() (err error) {
	if mt.Schedule != nil {
		if err2 := mt.Schedule.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeProgram decodes the Program instance encoded in resp body.
func (c *Client) DecodeProgram(resp *http.Response) (*Program, error) {
	var decoded Program
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// ProgramCollection is the media type for an array of Program (default view)
//
// Identifier: program; type=collection; view=default
type ProgramCollection []*Program

// Validate validates the ProgramCollection media type instance.
func (mt ProgramCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeProgramCollection decodes the ProgramCollection instance encoded in resp body.
func (c *Client) DecodeProgramCollection(resp *http.Response) (ProgramCollection, error) {
	var decoded ProgramCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Program_policy_group media type (default view)
//
// Identifier: program_policy_group; view=default
type ProgramPolicyGroup struct {
	// group
	Group *Group `form:"group,omitempty" json:"group,omitempty" yaml:"group,omitempty" xml:"group,omitempty"`
	// policy
	Policy *Policy `form:"policy,omitempty" json:"policy,omitempty" yaml:"policy,omitempty" xml:"policy,omitempty"`
}

// DecodeProgramPolicyGroup decodes the ProgramPolicyGroup instance encoded in resp body.
func (c *Client) DecodeProgramPolicyGroup(resp *http.Response) (*ProgramPolicyGroup, error) {
	var decoded ProgramPolicyGroup
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Recipient (default view)
//
// Identifier: recipient; view=default
type Recipient struct {
	// email
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
}

// DecodeRecipient decodes the Recipient instance encoded in resp body.
func (c *Client) DecodeRecipient(resp *http.Response) (*Recipient, error) {
	var decoded Recipient
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// RecipientCollection is the media type for an array of Recipient (default view)
//
// Identifier: recipient; type=collection; view=default
type RecipientCollection []*Recipient

// DecodeRecipientCollection decodes the RecipientCollection instance encoded in resp body.
func (c *Client) DecodeRecipientCollection(resp *http.Response) (RecipientCollection, error) {
	var decoded RecipientCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Report (default view)
//
// Identifier: report; view=default
type Report struct {
	// Delivered To
	DeliveredTo *string `form:"delivered_to,omitempty" json:"delivered_to,omitempty" yaml:"delivered_to,omitempty" xml:"delivered_to,omitempty"`
	// Report ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Report URL
	Report *string `form:"report,omitempty" json:"report,omitempty" yaml:"report,omitempty" xml:"report,omitempty"`
	// Report JSON URL
	ReportJSON *string `form:"report_json,omitempty" json:"report_json,omitempty" yaml:"report_json,omitempty" xml:"report_json,omitempty"`
	// Scan ID
	ScanID *string `form:"scan_id,omitempty" json:"scan_id,omitempty" yaml:"scan_id,omitempty" xml:"scan_id,omitempty"`
	// Status
	Status *string `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
}

// DecodeReport decodes the Report instance encoded in resp body.
func (c *Client) DecodeReport(resp *http.Response) (*Report, error) {
	var decoded Report
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Report Email Body (default view)
//
// Identifier: reportemail; view=default
type Reportemail struct {
	// Email Body
	EmailBody *string `form:"email_body,omitempty" json:"email_body,omitempty" yaml:"email_body,omitempty" xml:"email_body,omitempty"`
}

// DecodeReportemail decodes the Reportemail instance encoded in resp body.
func (c *Client) DecodeReportemail(resp *http.Response) (*Reportemail, error) {
	var decoded Reportemail
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// resource (default view)
//
// Identifier: resource; view=default
type Resource struct {
	// attributes of a resource
	Attributes []string `form:"attributes,omitempty" json:"attributes,omitempty" yaml:"attributes,omitempty" xml:"attributes,omitempty"`
	// Resource name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// values for attributes of a resource
	Resources []map[string]string `form:"resources,omitempty" json:"resources,omitempty" yaml:"resources,omitempty" xml:"resources,omitempty"`
}

// DecodeResource decodes the Resource instance encoded in resp body.
func (c *Client) DecodeResource(resp *http.Response) (*Resource, error) {
	var decoded Resource
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Scan (default view)
//
// Identifier: scan; view=default
type Scan struct {
	// Checks Count
	ChecksCount *int `form:"checks_count,omitempty" json:"checks_count,omitempty" yaml:"checks_count,omitempty" xml:"checks_count,omitempty"`
	// End Time
	EndTime *time.Time `form:"end_time,omitempty" json:"end_time,omitempty" yaml:"end_time,omitempty" xml:"end_time,omitempty"`
	// Scan ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Program
	Program *Program `form:"program,omitempty" json:"program,omitempty" yaml:"program,omitempty" xml:"program,omitempty"`
	// Progress
	Progress *float64 `form:"progress,omitempty" json:"progress,omitempty" yaml:"progress,omitempty" xml:"progress,omitempty"`
	// Requested By
	RequestedBy *string `form:"requested_by,omitempty" json:"requested_by,omitempty" yaml:"requested_by,omitempty" xml:"requested_by,omitempty"`
	// Scheduled Time
	ScheduledTime *time.Time `form:"scheduled_time,omitempty" json:"scheduled_time,omitempty" yaml:"scheduled_time,omitempty" xml:"scheduled_time,omitempty"`
	// Start Time
	StartTime *time.Time `form:"start_time,omitempty" json:"start_time,omitempty" yaml:"start_time,omitempty" xml:"start_time,omitempty"`
	// Status
	Status *string `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
}

// Validate validates the Scan media type instance.
func (mt *Scan) Validate() (err error) {
	if mt.Program != nil {
		if err2 := mt.Program.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeScan decodes the Scan instance encoded in resp body.
func (c *Client) DecodeScan(resp *http.Response) (*Scan, error) {
	var decoded Scan
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// ScanCollection is the media type for an array of Scan (default view)
//
// Identifier: scan; type=collection; view=default
type ScanCollection []*Scan

// Validate validates the ScanCollection media type instance.
func (mt ScanCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeScanCollection decodes the ScanCollection instance encoded in resp body.
func (c *Client) DecodeScanCollection(resp *http.Response) (ScanCollection, error) {
	var decoded ScanCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Schedule (default view)
//
// Identifier: schedule; view=default
type Schedule struct {
	// Cron Expression
	Cron string `form:"cron" json:"cron" yaml:"cron" xml:"cron"`
}

// Validate validates the Schedule media type instance.
func (mt *Schedule) Validate() (err error) {
	if mt.Cron == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "cron"))
	}
	return
}

// DecodeSchedule decodes the Schedule instance encoded in resp body.
func (c *Client) DecodeSchedule(resp *http.Response) (*Schedule, error) {
	var decoded Schedule
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// source (default view)
//
// Identifier: source; view=default
type Source struct {
	// Source component
	Component *string `form:"component,omitempty" json:"component,omitempty" yaml:"component,omitempty" xml:"component,omitempty"`
	// Source ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Source instance ID
	Instance *string `form:"instance,omitempty" json:"instance,omitempty" yaml:"instance,omitempty" xml:"instance,omitempty"`
	// Source name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// Source options
	Options *string `form:"options,omitempty" json:"options,omitempty" yaml:"options,omitempty" xml:"options,omitempty"`
	// Source execution end time
	Time *string `form:"time,omitempty" json:"time,omitempty" yaml:"time,omitempty" xml:"time,omitempty"`
}

// DecodeSource decodes the Source instance encoded in resp body.
func (c *Client) DecodeSource(resp *http.Response) (*Source, error) {
	var decoded Source
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Stats by severity (default view)
//
// Identifier: stats; view=default
type Stats struct {
	// Stats for critical vulnerabilities
	Critical *float64 `form:"critical,omitempty" json:"critical,omitempty" yaml:"critical,omitempty" xml:"critical,omitempty"`
	// Stats for high vulnerabilities
	High *float64 `form:"high,omitempty" json:"high,omitempty" yaml:"high,omitempty" xml:"high,omitempty"`
	// Stats for informational vulnerabilities
	Informational *float64 `form:"informational,omitempty" json:"informational,omitempty" yaml:"informational,omitempty" xml:"informational,omitempty"`
	// Stats for low vulnerabilities
	Low *float64 `form:"low,omitempty" json:"low,omitempty" yaml:"low,omitempty" xml:"low,omitempty"`
	// Stats for medium vulnerabilities
	Medium *float64 `form:"medium,omitempty" json:"medium,omitempty" yaml:"medium,omitempty" xml:"medium,omitempty"`
}

// DecodeStats decodes the Stats instance encoded in resp body.
func (c *Client) DecodeStats(resp *http.Response) (*Stats, error) {
	var decoded Stats
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Assets by severity stats (default view)
//
// Identifier: statsassets; view=default
type Statsassets struct {
	// Stats for assets by severity
	Assets *Statstotal `form:"assets,omitempty" json:"assets,omitempty" yaml:"assets,omitempty" xml:"assets,omitempty"`
}

// DecodeStatsassets decodes the Statsassets instance encoded in resp body.
func (c *Client) DecodeStatsassets(resp *http.Response) (*Statsassets, error) {
	var decoded Statsassets
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Stats by different averages (default view)
//
// Identifier: statsaverages; view=default
type Statsaverages struct {
	// Mean of the stats
	Mean *float64 `form:"mean,omitempty" json:"mean,omitempty" yaml:"mean,omitempty" xml:"mean,omitempty"`
	// Percentile 10 of the stats
	Percentile10 *float64 `form:"percentile_10,omitempty" json:"percentile_10,omitempty" yaml:"percentile_10,omitempty" xml:"percentile_10,omitempty"`
	// Percentile 25 of the stats
	Percentile25 *float64 `form:"percentile_25,omitempty" json:"percentile_25,omitempty" yaml:"percentile_25,omitempty" xml:"percentile_25,omitempty"`
	// Percentile 50 or median of the stats
	Percentile50 *float64 `form:"percentile_50,omitempty" json:"percentile_50,omitempty" yaml:"percentile_50,omitempty" xml:"percentile_50,omitempty"`
	// Percentile 75 or third quartile of the stats
	Percentile75 *float64 `form:"percentile_75,omitempty" json:"percentile_75,omitempty" yaml:"percentile_75,omitempty" xml:"percentile_75,omitempty"`
	// Percentile 90 of the stats
	Percentile90 *float64 `form:"percentile_90,omitempty" json:"percentile_90,omitempty" yaml:"percentile_90,omitempty" xml:"percentile_90,omitempty"`
}

// DecodeStatsaverages decodes the Statsaverages instance encoded in resp body.
func (c *Client) DecodeStatsaverages(resp *http.Response) (*Statsaverages, error) {
	var decoded Statsaverages
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Asset Coverage: discovered vs. confirmed (default view)
//
// Identifier: statscoverage; view=default
type Statscoverage struct {
	// Percentage of assets confirmed respect to discovered
	Coverage *float64 `form:"coverage,omitempty" json:"coverage,omitempty" yaml:"coverage,omitempty" xml:"coverage,omitempty"`
}

// DecodeStatscoverage decodes the Statscoverage instance encoded in resp body.
func (c *Client) DecodeStatscoverage(resp *http.Response) (*Statscoverage, error) {
	var decoded Statscoverage
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Fixed issues stats (default view)
//
// Identifier: statsfixed; view=default
type Statsfixed struct {
	// Stats for fixed issues by severity
	FixedIssues *Stats `form:"fixed_issues,omitempty" json:"fixed_issues,omitempty" yaml:"fixed_issues,omitempty" xml:"fixed_issues,omitempty"`
}

// DecodeStatsfixed decodes the Statsfixed instance encoded in resp body.
func (c *Client) DecodeStatsfixed(resp *http.Response) (*Statsfixed, error) {
	var decoded Statsfixed
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Open issues stats (default view)
//
// Identifier: statsopen; view=default
type Statsopen struct {
	// Stats for open issues by severity
	OpenIssues *Stats `form:"open_issues,omitempty" json:"open_issues,omitempty" yaml:"open_issues,omitempty" xml:"open_issues,omitempty"`
}

// DecodeStatsopen decodes the Statsopen instance encoded in resp body.
func (c *Client) DecodeStatsopen(resp *http.Response) (*Statsopen, error) {
	var decoded Statsopen
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Stats by severity (default view)
//
// Identifier: statstotal; view=default
type Statstotal struct {
	// Stats for critical vulnerabilities
	Critical *float64 `form:"critical,omitempty" json:"critical,omitempty" yaml:"critical,omitempty" xml:"critical,omitempty"`
	// Stats for high vulnerabilities
	High *float64 `form:"high,omitempty" json:"high,omitempty" yaml:"high,omitempty" xml:"high,omitempty"`
	// Stats for informational vulnerabilities
	Informational *float64 `form:"informational,omitempty" json:"informational,omitempty" yaml:"informational,omitempty" xml:"informational,omitempty"`
	// Stats for low vulnerabilities
	Low *float64 `form:"low,omitempty" json:"low,omitempty" yaml:"low,omitempty" xml:"low,omitempty"`
	// Stats for medium vulnerabilities
	Medium *float64 `form:"medium,omitempty" json:"medium,omitempty" yaml:"medium,omitempty" xml:"medium,omitempty"`
	// Stats for all vulnerabilities
	Total *float64 `form:"total,omitempty" json:"total,omitempty" yaml:"total,omitempty" xml:"total,omitempty"`
}

// DecodeStatstotal decodes the Statstotal instance encoded in resp body.
func (c *Client) DecodeStatstotal(resp *http.Response) (*Statstotal, error) {
	var decoded Statstotal
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// target (default view)
//
// Identifier: target; view=default
type Target struct {
	// Target ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" yaml:"identifier,omitempty" xml:"identifier,omitempty"`
	// List of TeamIDs associated with target
	Teams []string `form:"teams,omitempty" json:"teams,omitempty" yaml:"teams,omitempty" xml:"teams,omitempty"`
}

// DecodeTarget decodes the Target instance encoded in resp body.
func (c *Client) DecodeTarget(resp *http.Response) (*Target, error) {
	var decoded Target
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Team (default view)
//
// Identifier: team; view=default
type Team struct {
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	// Team ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty" yaml:"tag,omitempty" xml:"tag,omitempty"`
}

// DecodeTeam decodes the Team instance encoded in resp body.
func (c *Client) DecodeTeam(resp *http.Response) (*Team, error) {
	var decoded Team
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// TeamCollection is the media type for an array of Team (default view)
//
// Identifier: team; type=collection; view=default
type TeamCollection []*Team

// DecodeTeamCollection decodes the TeamCollection instance encoded in resp body.
func (c *Client) DecodeTeamCollection(resp *http.Response) (TeamCollection, error) {
	var decoded TeamCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Team Member (default view)
//
// Identifier: teammember; view=default
type Teammember struct {
	// Role
	Role *string `form:"role,omitempty" json:"role,omitempty" yaml:"role,omitempty" xml:"role,omitempty"`
	// User
	User *User `form:"user,omitempty" json:"user,omitempty" yaml:"user,omitempty" xml:"user,omitempty"`
}

// DecodeTeammember decodes the Teammember instance encoded in resp body.
func (c *Client) DecodeTeammember(resp *http.Response) (*Teammember, error) {
	var decoded Teammember
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// TeammemberCollection is the media type for an array of Teammember (default view)
//
// Identifier: teammember; type=collection; view=default
type TeammemberCollection []*Teammember

// DecodeTeammemberCollection decodes the TeammemberCollection instance encoded in resp body.
func (c *Client) DecodeTeammemberCollection(resp *http.Response) (TeammemberCollection, error) {
	var decoded TeammemberCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Token (default view)
//
// Identifier: token; view=default
type Token struct {
	// Creation time
	CreationTime *string `form:"creation_time,omitempty" json:"creation_time,omitempty" yaml:"creation_time,omitempty" xml:"creation_time,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// Hash
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" yaml:"hash,omitempty" xml:"hash,omitempty"`
	// Token
	Token *string `form:"token,omitempty" json:"token,omitempty" yaml:"token,omitempty" xml:"token,omitempty"`
}

// Token (metadata view)
//
// Identifier: token; view=metadata
type TokenMetadata struct {
	// Creation time
	CreationTime *string `form:"creation_time,omitempty" json:"creation_time,omitempty" yaml:"creation_time,omitempty" xml:"creation_time,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// Hash
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" yaml:"hash,omitempty" xml:"hash,omitempty"`
}

// DecodeToken decodes the Token instance encoded in resp body.
func (c *Client) DecodeToken(resp *http.Response) (*Token, error) {
	var decoded Token
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeTokenMetadata decodes the TokenMetadata instance encoded in resp body.
func (c *Client) DecodeTokenMetadata(resp *http.Response) (*TokenMetadata, error) {
	var decoded TokenMetadata
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// User (default view)
//
// Identifier: user; view=default
type User struct {
	// Active
	Active *bool `form:"active,omitempty" json:"active,omitempty" yaml:"active,omitempty" xml:"active,omitempty"`
	// Admin
	Admin *bool `form:"admin,omitempty" json:"admin,omitempty" yaml:"admin,omitempty" xml:"admin,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// First name
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" yaml:"firstname,omitempty" xml:"firstname,omitempty"`
	// User ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// last_login
	LastLogin *time.Time `form:"last_login,omitempty" json:"last_login,omitempty" yaml:"last_login,omitempty" xml:"last_login,omitempty"`
	// Last name
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" yaml:"lastname,omitempty" xml:"lastname,omitempty"`
	// Observer
	Observer *bool `form:"observer,omitempty" json:"observer,omitempty" yaml:"observer,omitempty" xml:"observer,omitempty"`
}

// DecodeUser decodes the User instance encoded in resp body.
func (c *Client) DecodeUser(resp *http.Response) (*User, error) {
	var decoded User
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// UserCollection is the media type for an array of User (default view)
//
// Identifier: user; type=collection; view=default
type UserCollection []*User

// DecodeUserCollection decodes the UserCollection instance encoded in resp body.
func (c *Client) DecodeUserCollection(resp *http.Response) (UserCollection, error) {
	var decoded UserCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

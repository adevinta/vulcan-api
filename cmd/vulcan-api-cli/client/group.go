// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "Vulcan-API": group Resource Client
//
// Command:
// $ main

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateGroupPath computes a request path to the create action of group.
func CreateGroupPath(teamID string) string {
	param0 := teamID

	return fmt.Sprintf("/api/v1/teams/%s/groups", param0)
}

// Create a new group of assets.
func (c *Client) CreateGroup(ctx context.Context, path string, payload *GroupPayload) (*http.Response, error) {
	req, err := c.NewCreateGroupRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateGroupRequest create the request corresponding to the create action endpoint of the group resource.
func (c *Client) NewCreateGroupRequest(ctx context.Context, path string, payload *GroupPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteGroupPath computes a request path to the delete action of group.
func DeleteGroupPath(teamID string, groupID string) string {
	param0 := teamID
	param1 := groupID

	return fmt.Sprintf("/api/v1/teams/%s/groups/%s", param0, param1)
}

// Delete a group of assets.
func (c *Client) DeleteGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteGroupRequest create the request corresponding to the delete action endpoint of the group resource.
func (c *Client) NewDeleteGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListGroupPath computes a request path to the list action of group.
func ListGroupPath(teamID string) string {
	param0 := teamID

	return fmt.Sprintf("/api/v1/teams/%s/groups", param0)
}

// List all groups of assets from a team.
func (c *Client) ListGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListGroupRequest create the request corresponding to the list action endpoint of the group resource.
func (c *Client) NewListGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowGroupPath computes a request path to the show action of group.
func ShowGroupPath(teamID string, groupID string) string {
	param0 := teamID
	param1 := groupID

	return fmt.Sprintf("/api/v1/teams/%s/groups/%s", param0, param1)
}

// Describe a group of assets.
func (c *Client) ShowGroup(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowGroupRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowGroupRequest create the request corresponding to the show action endpoint of the group resource.
func (c *Client) NewShowGroupRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UpdateGroupPath computes a request path to the update action of group.
func UpdateGroupPath(teamID string, groupID string) string {
	param0 := teamID
	param1 := groupID

	return fmt.Sprintf("/api/v1/teams/%s/groups/%s", param0, param1)
}

// Update a group of assets.
func (c *Client) UpdateGroup(ctx context.Context, path string, payload *GroupPayload) (*http.Response, error) {
	req, err := c.NewUpdateGroupRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateGroupRequest create the request corresponding to the update action endpoint of the group resource.
func (c *Client) NewUpdateGroupRequest(ctx context.Context, path string, payload *GroupPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.BearerSigner != nil {
		if err := c.BearerSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
